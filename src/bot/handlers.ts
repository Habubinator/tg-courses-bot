import TelegramBot from "node-telegram-bot-api";
import { CourseCommands } from "./commands/course";
import { AdminCommands } from "./commands/admin";
import { Keyboard } from "./keyboard";
import { repository } from "../db/repository";

export class BotHandlers {
    private bot: TelegramBot;
    private courseCommands: CourseCommands;
    private adminCommands: AdminCommands;

    constructor(bot: TelegramBot) {
        this.bot = bot;
        this.bot.setMyCommands([
            {
                command: "/start",
                description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
            },
            {
                command: "/help",
                description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
            },
            {
                command: "/admin_add",
                description: "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
            },
            {
                command: "/admin_remove",
                description: "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
            },
            {
                command: "/stats",
                description: "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
            },
        ]);

        this.courseCommands = new CourseCommands(bot);
        this.adminCommands = new AdminCommands(bot);
    }

    public registerHandlers(): void {
        // Register command-specific handlers
        this.courseCommands.registerHandlers();
        this.adminCommands.registerHandlers();

        // Register global commands
        this.registerGlobalCommands();
    }

    private registerGlobalCommands(): void {
        // Start command
        this.bot.onText(/\/start/, this.handleStart.bind(this));

        // Help command
        this.bot.onText(/\/help/, this.handleHelp.bind(this));
    }

    private async handleStart(msg: TelegramBot.Message): Promise<void> {
        const chatId = msg.chat.id.toString();

        // Create or get user
        await repository.getOrCreateUser(
            chatId,
            msg.chat.username,
            msg.chat.first_name,
            msg.chat.last_name
        );

        const welcomeMessage =
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ–Ω–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è!\n\n" +
            "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏.\n\n" +
            "üìö –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.";

        await this.bot.sendMessage(chatId, welcomeMessage, {
            reply_markup: Keyboard.getStartKeyboard(),
        });
    }

    private async handleHelp(msg: TelegramBot.Message): Promise<void> {
        const chatId = msg.chat.id.toString();

        const helpMessage =
            "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n" +
            "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n" +
            "1. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∫—É—Ä—Å' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ–±—É—á–µ–Ω–∏—è\n" +
            "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —É—Ä–æ–∫–∏ –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ '–ü–æ—Å–º–æ—Ç—Ä–µ–ª!' –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è\n" +
            "3. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã, –≤—ã–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n" +
            "4. –ü–æ–ª—É—á–∞–π—Ç–µ –æ—Ü–µ–Ω–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ\n\n" +
            "*–ö–æ–º–∞–Ω–¥—ã:*\n" +
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
            "*–û—Ü–µ–Ω–∫–∏:*\n" +
            "üèÜ A (90-100%) - –û—Ç–ª–∏—á–Ω–æ\n" +
            "ü•à B (80-89%) - –•–æ—Ä–æ—à–æ\n" +
            "ü•â C (70-79%) - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ\n" +
            "üìö D (60-69%) - –°–ª–∞–±–æ\n" +
            "üìñ F (0-59%) - –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ";

        await this.bot.sendMessage(chatId, helpMessage, {
            parse_mode: "Markdown",
        });
    }
}
