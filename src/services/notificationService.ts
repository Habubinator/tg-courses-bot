import TelegramBot from "node-telegram-bot-api";
import { repository } from "../db/repository";
import { CONFIG } from "../config";
import { CourseState, MediaType } from "../../generated/prisma";

export class NotificationService {
    private bot: TelegramBot;

    constructor(bot: TelegramBot) {
        this.bot = bot;
    }

    async checkAndSendNotifications(): Promise<void> {
        try {
            // Check for users who need lesson start notifications
            await this.checkLessonStartNotifications();

            // Check for users who need watched lesson notifications
            await this.checkWatchedNotifications();

            // Check for users who need test completion notifications
            await this.checkTestTimeoutNotifications();
        } catch (error) {
            console.error("Error in notification service:", error);
        }
    }

    private async checkLessonStartNotifications(): Promise<void> {
        const users = await repository.getUsersForNotification(
            "", // All courses
            CourseState.WATCHING_LESSON,
            CONFIG.app.lessonStartTimeoutMinutes
        );

        for (const userCourse of users) {
            const notifications = await repository.getNotificationsForState(
                userCourse.courseId,
                CourseState.WATCHING_LESSON
            );

            for (const notification of notifications) {
                await this.sendNotification(
                    userCourse.user.telegramId,
                    notification
                );
            }
        }
    }

    private async checkWatchedNotifications(): Promise<void> {
        const users = await repository.getUsersForNotification(
            "", // All courses
            CourseState.TAKING_TEST,
            CONFIG.app.watchedTimeoutMinutes
        );

        for (const userCourse of users) {
            const notifications = await repository.getNotificationsForState(
                userCourse.courseId,
                CourseState.TAKING_TEST
            );

            for (const notification of notifications) {
                await this.sendNotification(
                    userCourse.user.telegramId,
                    notification
                );
            }
        }
    }

    private async checkTestTimeoutNotifications(): Promise<void> {
        const users = await repository.getUsersForNotification(
            "", // All courses
            CourseState.TAKING_TEST,
            CONFIG.app.testTimeoutMinutes
        );

        for (const userCourse of users) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
            const message =
                `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–µ*\n\n` +
                `–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –µ–≥–æ.\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`;

            try {
                await this.bot.sendMessage(
                    userCourse.user.telegramId,
                    message,
                    {
                        parse_mode: "Markdown",
                    }
                );
            } catch (error) {
                console.error(
                    `Error sending test timeout notification to ${userCourse.user.telegramId}:`,
                    error
                );
            }
        }
    }

    private async sendNotification(
        telegramId: string,
        notification: any
    ): Promise<void> {
        try {
            const options: any = {
                caption: notification.caption,
            };

            if (notification.buttonText && notification.buttonUrl) {
                options.reply_markup = {
                    inline_keyboard: [
                        [
                            {
                                text: notification.buttonText,
                                url: notification.buttonUrl,
                            },
                        ],
                    ],
                };
            }

            if (notification.mediaType === MediaType.PHOTO) {
                await this.bot.sendPhoto(
                    telegramId,
                    notification.mediaUrl,
                    options
                );
            } else if (notification.mediaType === MediaType.VIDEO) {
                await this.bot.sendVideo(
                    telegramId,
                    notification.mediaUrl,
                    options
                );
            }
        } catch (error) {
            console.error(
                `Error sending notification to ${telegramId}:`,
                error
            );
        }
    }

    async notifyAdminsOfCompletion(user: any, course: any): Promise<void> {
        const admins = await repository.getAdmins();

        const message =
            `üéì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å!\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName || ""} ${
                user.lastName || ""
            }\n` +
            `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
            `üë§ Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
            `üìö –ö—É—Ä—Å: ${course.title}\n` +
            `üÜî Telegram ID: ${user.telegramId}\n` +
            `üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString("ru-RU")}`;

        for (const admin of admins) {
            try {
                await this.bot.sendMessage(admin.telegramId, message);
            } catch (error) {
                console.error(
                    `Error notifying admin ${admin.telegramId}:`,
                    error
                );
            }
        }
    }

    async notifyUsersAboutNewTest(
        lessonId: string,
        testTitle: string
    ): Promise<{ sent: number; total: number }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ –∫—É—Ä—Å
            const lesson = await repository.getCourseById(""); // –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            if (!lesson) {
                throw new Error("Lesson not found");
            }

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫
            const usersWhoCompleted = await this.getUsersWhoCompletedLesson(
                lessonId
            );

            const message =
                `üìù *–ù–æ–≤—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!*\n\n` +
                `–ö —É—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏, –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç.\n\n` +
                `üéØ *–¢–µ—Å—Ç:* ${testTitle}\n\n` +
                `–ü—Ä–æ–π–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è!\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`;

            let sentCount = 0;

            for (const user of usersWhoCompleted) {
                try {
                    await this.bot.sendMessage(user.telegramId, message, {
                        parse_mode: "Markdown",
                    });
                    sentCount++;
                } catch (error) {
                    console.error(
                        `Failed to send test notification to user ${user.telegramId}:`,
                        error
                    );
                }
            }

            return {
                sent: sentCount,
                total: usersWhoCompleted.length,
            };
        } catch (error) {
            console.error("Error in notifyUsersAboutNewTest:", error);
            throw error;
        }
    }

    private async getUsersWhoCompletedLesson(lessonId: string): Promise<any[]> {
        // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫

        // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
        // 1. –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ –∏ –µ–≥–æ orderIndex
        // 2. –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É—Ä—Å–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö currentLessonIndex > orderIndex
        // 3. –ò–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω

        return [];
    }

    async notifyUserAboutTestFailure(
        telegramId: string,
        testTitle: string,
        score: number,
        requiredScore: number = 70
    ): Promise<void> {
        const message =
            `üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞*\n\n` +
            `–¢–µ—Å—Ç: ${testTitle}\n` +
            `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}%\n\n` +
            `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${requiredScore}%.\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`;

        try {
            await this.bot.sendMessage(telegramId, message, {
                parse_mode: "Markdown",
            });
        } catch (error) {
            console.error(
                `Error sending test failure notification to ${telegramId}:`,
                error
            );
        }
    }

    async notifyUserAboutTestSuccess(
        telegramId: string,
        testTitle: string,
        score: number,
        grade: string
    ): Promise<void> {
        const gradeEmojis: { [key: string]: string } = {
            A: "üèÜ",
            B: "ü•à",
            C: "ü•â",
            D: "üìö",
            F: "üìñ",
        };

        const emoji = gradeEmojis[grade] || "‚úÖ";

        const message =
            `üéâ *–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!*\n\n` +
            `–¢–µ—Å—Ç: ${testTitle}\n` +
            `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}%\n` +
            `–û—Ü–µ–Ω–∫–∞: ${emoji} ${grade}\n\n` +
            `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.`;

        try {
            await this.bot.sendMessage(telegramId, message, {
                parse_mode: "Markdown",
            });
        } catch (error) {
            console.error(
                `Error sending test success notification to ${telegramId}:`,
                error
            );
        }
    }

    async sendCustomNotification(
        telegramId: string,
        message: string,
        mediaUrl?: string,
        mediaType?: "PHOTO" | "VIDEO",
        buttonText?: string,
        buttonUrl?: string
    ): Promise<void> {
        try {
            const options: any = {};

            if (buttonText && buttonUrl) {
                options.reply_markup = {
                    inline_keyboard: [
                        [
                            {
                                text: buttonText,
                                url: buttonUrl,
                            },
                        ],
                    ],
                };
            }

            if (mediaUrl && mediaType) {
                options.caption = message;

                if (mediaType === "PHOTO") {
                    await this.bot.sendPhoto(telegramId, mediaUrl, options);
                } else if (mediaType === "VIDEO") {
                    await this.bot.sendVideo(telegramId, mediaUrl, options);
                }
            } else {
                await this.bot.sendMessage(telegramId, message, {
                    parse_mode: "Markdown",
                    ...options,
                });
            }
        } catch (error) {
            console.error(
                `Error sending custom notification to ${telegramId}:`,
                error
            );
            throw error;
        }
    }

    async broadcastToAllUsers(
        message: string,
        mediaUrl?: string,
        mediaType?: "PHOTO" | "VIDEO",
        buttonText?: string,
        buttonUrl?: string
    ): Promise<{ sent: number; failed: number }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = await repository.getAllUsers(); // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ repository

            let sentCount = 0;
            let failedCount = 0;

            for (const user of users) {
                try {
                    await this.sendCustomNotification(
                        user.telegramId,
                        message,
                        mediaUrl,
                        mediaType,
                        buttonText,
                        buttonUrl
                    );
                    sentCount++;

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await new Promise((resolve) => setTimeout(resolve, 100));
                } catch (error) {
                    console.error(
                        `Failed to send broadcast to user ${user.telegramId}:`,
                        error
                    );
                    failedCount++;
                }
            }

            return { sent: sentCount, failed: failedCount };
        } catch (error) {
            console.error("Error in broadcastToAllUsers:", error);
            throw error;
        }
    }

    async notifyAdminsAboutNewUser(user: any): Promise<void> {
        const admins = await repository.getAdmins();

        const message =
            `üëã *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!*\n\n` +
            `üë§ –ò–º—è: ${user.firstName || ""} ${user.lastName || ""}\n` +
            `üë§ Username: @${user.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
            `üÜî Telegram ID: ${user.telegramId}\n` +
            `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleString("ru-RU")}`;

        for (const admin of admins) {
            try {
                await this.bot.sendMessage(admin.telegramId, message, {
                    parse_mode: "Markdown",
                });
            } catch (error) {
                console.error(
                    `Error notifying admin ${admin.telegramId} about new user:`,
                    error
                );
            }
        }
    }

    async notifyAdminsAboutError(
        errorMessage: string,
        userId?: string,
        context?: string
    ): Promise<void> {
        const admins = await repository.getAdmins();

        const message =
            `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ*\n\n` +
            `üìù –û—à–∏–±–∫–∞: ${errorMessage}\n` +
            (userId ? `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n` : "") +
            (context ? `üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}\n` : "") +
            `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`;

        for (const admin of admins) {
            try {
                await this.bot.sendMessage(admin.telegramId, message, {
                    parse_mode: "Markdown",
                });
            } catch (error) {
                console.error(
                    `Error notifying admin ${admin.telegramId} about error:`,
                    error
                );
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export let notificationService: NotificationService | null = null;

export function initializeNotificationService(bot: TelegramBot): void {
    notificationService = new NotificationService(bot);
}
