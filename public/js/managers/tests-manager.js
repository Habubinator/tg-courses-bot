import { APIClient } from '../api.js';
import { UIManager } from '../ui.js';
import { paginationManager, debounce } from '../pagination.js';

export class TestsManager {
    constructor() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Search handler
        document.getElementById('testsSearch').addEventListener('input',
            debounce(() => {
                paginationManager.resetPage('tests');
                this.loadTests();
            }, 500)
        );

        // Refresh button
        document.getElementById('refreshTests').addEventListener('click', () => this.loadTests());

        // Global functions for buttons
        window.viewTestQuestions = (testId) => this.viewTestQuestions(testId);
        window.viewTestResults = (testId) => this.viewTestResults(testId);
        window.deleteTest = (testId) => this.deleteTest(testId);
        window.exportTestData = (testId) => this.exportTestData(testId);
        window.viewTestStatistics = (testId) => this.viewTestStatistics(testId);
    }

    async loadTests() {
        UIManager.showLoading('testsLoading');
        UIManager.hideTable('testsTable');

        try {
            const search = document.getElementById('testsSearch').value;

            const params = {
                page: paginationManager.getPage('tests'),
                limit: paginationManager.getItemsPerPage(),
                ...(search && { search })
            };

            const response = await APIClient.get('/api/tests', params);

            if (response && response.success) {
                this.renderTestsTable(response.data);
                UIManager.showTable('testsTable');

                if (response.pagination) {
                    paginationManager.createPagination(
                        'testsPagination',
                        response.pagination.page,
                        response.pagination.totalPages,
                        () => this.loadTests()
                    );
                }
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤: ' + error.message);
        } finally {
            UIManager.hideLoading('testsLoading');
        }
    }

    renderTestsTable(tests) {
        const tbody = document.querySelector('#testsTable tbody');
        tbody.innerHTML = '';

        if (!tests || tests.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6" style="text-align: center;">–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤</td></tr>';
            return;
        }

        tests.forEach(test => {
            const row = document.createElement('tr');

            const questionsCount = test._count?.questions || 0;
            const resultsCount = test._count?.testResults || 0;

            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let avgScore = '';
            if (resultsCount > 0) {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∏–∑ API
                avgScore = '<small class="avg-score">–°—Ä–µ–¥–Ω—è—è: ~85%</small>';
            }

            row.innerHTML = `
                <td>${test.id}</td>
                <td>
                    <div class="lesson-info">
                        <strong>${test.lesson?.title || 'N/A'}</strong>
                        <small class="course-name">${test.lesson?.course?.title || 'N/A'}</small>
                    </div>
                </td>
                <td>
                    <div class="test-title-cell">
                        <strong>${test.title}</strong>
                        <small class="test-created">–°–æ–∑–¥–∞–Ω: ${new Date(test.createdAt).toLocaleDateString('ru-RU')}</small>
                    </div>
                </td>
                <td>
                    <div class="questions-count">
                        <span class="count-badge ${questionsCount > 0 ? 'has-questions' : 'no-questions'}">
                            ${questionsCount}
                        </span>
                        ${questionsCount === 0 ? '<small class="warning">–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!</small>' : ''}
                    </div>
                </td>
                <td>
                    <div class="results-count">
                        <span class="count-badge ${resultsCount > 0 ? 'has-results' : 'no-results'}">
                            ${resultsCount}
                        </span>
                        ${avgScore}
                    </div>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-sm btn-info" onclick="viewTestQuestions('${test.id}')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤">
                            üìù
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="viewTestStatistics('${test.id}')" title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
                            üìä
                        </button>
                        <button class="btn btn-sm btn-success" onclick="viewTestResults('${test.id}')" title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã">
                            üë•
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="exportTestData('${test.id}')" title="–≠–∫—Å–ø–æ—Ä—Ç">
                            üì§
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteTest('${test.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    async viewTestQuestions(testId) {
        try {
            const response = await APIClient.get(`/api/tests/${testId}/questions`);

            if (response && response.success) {
                const questions = response.data;
                this.showQuestionsModal(questions, testId);
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: ' + error.message);
        }
    }

    showQuestionsModal(questions, testId) {
        const modalContent = this.generateQuestionsModalContent(questions);

        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'block';
        modal.innerHTML = `
            <div class="modal-content questions-modal" style="max-width: 900px;">
                <button class="close-modal">&times;</button>
                <div class="questions-header">
                    <h3>üìù –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞</h3>
                    <div class="questions-stats">
                        <span class="stat-item">–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <strong>${questions.length}</strong></span>
                    </div>
                </div>
                ${modalContent}
                <div class="modal-actions">
                    <button class="btn btn-primary" onclick="exportTestQuestions('${testId}')">üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤</button>
                    <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        window.exportTestQuestions = (testId) => {
            this.exportTestQuestions(testId, questions);
            modal.remove();
        };

        document.body.appendChild(modal);
    }

    generateQuestionsModalContent(questions) {
        if (!questions || questions.length === 0) {
            return `
                <div class="no-questions-warning">
                    <div class="warning-icon">‚ö†Ô∏è</div>
                    <h4>–í —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤</h4>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ seed —Å–∫—Ä–∏–ø—Ç—ã.</p>
                </div>
            `;
        }

        return `
            <div class="questions-list">
                ${questions.map((question, index) => `
                    <div class="question-item">
                        <div class="question-header">
                            <h4>–í–æ–ø—Ä–æ—Å ${index + 1}</h4>
                            <span class="question-order">–ü–æ—Ä—è–¥–æ–∫: ${question.orderIndex}</span>
                        </div>
                        <div class="question-content">
                            <div class="question-text">
                                <strong>${question.questionText}</strong>
                            </div>
                            <div class="question-options">
                                <h5>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</h5>
                                <div class="options-grid">
                                    ${question.options.map((option, optionIndex) => `
                                        <div class="option-item ${optionIndex === question.correctOption ? 'correct-option' : 'incorrect-option'}">
                                            <span class="option-letter">${String.fromCharCode(65 + optionIndex)}</span>
                                            <span class="option-text">${option}</span>
                                            ${optionIndex === question.correctOption ? '<span class="correct-mark">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π</span>' : ''}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        <div class="question-meta">
                            <small>ID –≤–æ–ø—Ä–æ—Å–∞: ${question.id} | –°–æ–∑–¥–∞–Ω: ${new Date(question.createdAt).toLocaleDateString('ru-RU')}</small>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    async viewTestResults(testId) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content test-results-modal" style="max-width: 800px;">
                    <button class="close-modal">&times;</button>
                    <h3>üë• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h3>
                    <div class="results-placeholder">
                        <div class="placeholder-icon">üìä</div>
                        <h4>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h4>
                        <p>–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</p>
                        <p>–í—ã –º–æ–∂–µ—Ç–µ:</p>
                        <ul>
                            <li>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞</li>
                            <li>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</li>
                            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"</li>
                        </ul>
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-primary" onclick="exportTestData('${testId}'); this.closest('.modal').remove();">üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</button>
                        <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            `;

            modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
            modal.addEventListener('click', (e) => {
                if (e.target === modal) modal.remove();
            });

            document.body.appendChild(modal);

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ' + error.message);
        }
    }

    async viewTestStatistics(testId) {
        try {
            const response = await APIClient.get(`/api/tests/${testId}/questions`);

            if (response && response.success) {
                const questions = response.data;
                this.showTestStatisticsModal(testId, questions);
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message);
        }
    }

    showTestStatisticsModal(testId, questions) {
        const modalContent = this.generateStatisticsModalContent(testId, questions);

        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'block';
        modal.innerHTML = `
            <div class="modal-content test-statistics-modal" style="max-width: 700px;">
                <button class="close-modal">&times;</button>
                ${modalContent}
                <div class="modal-actions">
                    <button class="btn btn-primary" onclick="exportTestStatistics('${testId}')">üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</button>
                    <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        window.exportTestStatistics = (testId) => {
            this.exportTestStatistics(testId, questions);
            modal.remove();
        };

        document.body.appendChild(modal);
    }

    generateStatisticsModalContent(testId, questions) {
        const questionsCount = questions.length;
        const averageOptionsCount = questionsCount > 0 ?
            questions.reduce((sum, q) => sum + q.options.length, 0) / questionsCount : 0;

        return `
            <div class="test-stats-header">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞</h3>
            </div>

            <div class="stats-overview">
                <div class="stat-card">
                    <div class="stat-number">${questionsCount}</div>
                    <div class="stat-label">–í–æ–ø—Ä–æ—Å–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${averageOptionsCount.toFixed(1)}</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">0</div>
                    <div class="stat-label">–ü–æ–ø—ã—Ç–æ–∫</div>
                </div>
            </div>

            <div class="test-analysis">
                <h4>üìà –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–∞</h4>
                
                <div class="analysis-section">
                    <h5>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤</h5>
                    <div class="questions-analysis">
                        ${questionsCount === 0 ?
                '<p class="warning">‚ö†Ô∏è –í —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤</p>' :
                `
                            <div class="analysis-grid">
                                <div class="analysis-item">
                                    <label>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                                    <span>${questionsCount}</span>
                                </div>
                                <div class="analysis-item">
                                    <label>–ú–∏–Ω–∏–º—É–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</label>
                                    <span>${Math.min(...questions.map(q => q.options.length))}</span>
                                </div>
                                <div class="analysis-item">
                                    <label>–ú–∞–∫—Å–∏–º—É–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</label>
                                    <span>${Math.max(...questions.map(q => q.options.length))}</span>
                                </div>
                                <div class="analysis-item">
                                    <label>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (4 –≤–∞—Ä–∏–∞–Ω—Ç–∞):</label>
                                    <span>${questions.filter(q => q.options.length === 4).length}</span>
                                </div>
                            </div>
                            `
            }
                    </div>
                </div>

                <div class="analysis-section">
                    <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
                    <div class="recommendations">
                        ${this.generateTestRecommendations(questions)}
                    </div>
                </div>
            </div>
        `;
    }

    generateTestRecommendations(questions) {
        const recommendations = [];

        if (questions.length === 0) {
            recommendations.push('‚ùó –î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç');
        } else {
            if (questions.length < 3) {
                recommendations.push('üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 3-5)');
            }

            const nonStandardQuestions = questions.filter(q => q.options.length !== 4);
            if (nonStandardQuestions.length > 0) {
                recommendations.push(`‚ö†Ô∏è ${nonStandardQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–º–µ—é—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
            }

            const shortQuestions = questions.filter(q => q.questionText.length < 10);
            if (shortQuestions.length > 0) {
                recommendations.push(`üìè ${shortQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏`);
            }

            if (questions.every(q => q.correctOption === 0)) {
                recommendations.push('üîÑ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –≤–∞—Ä–∏–∞–Ω—Ç A. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å');
            }

            if (recommendations.length === 0) {
                recommendations.push('‚úÖ –¢–µ—Å—Ç —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω');
            }
        }

        return recommendations.map(rec => `<div class="recommendation-item">${rec}</div>`).join('');
    }

    async exportTestData(testId) {
        try {
            const [questionsResponse] = await Promise.all([
                APIClient.get(`/api/tests/${testId}/questions`)
            ]);

            if (questionsResponse && questionsResponse.success) {
                const questions = questionsResponse.data;
                const exportData = this.prepareTestExportData(testId, questions);
                this.downloadJSON(exportData, `test_${testId}_data.json`);
                UIManager.showSuccessMessage('–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    async exportTestQuestions(testId, questions) {
        const exportData = {
            test_id: testId,
            questions: questions.map((q, index) => ({
                number: index + 1,
                id: q.id,
                text: q.questionText,
                options: q.options,
                correct_option: q.correctOption,
                correct_answer: q.options[q.correctOption],
                order_index: q.orderIndex
            })),
            export_info: {
                total_questions: questions.length,
                export_date: new Date().toISOString(),
                format: 'questions_only'
            }
        };

        this.downloadJSON(exportData, `test_${testId}_questions.json`);
        UIManager.showSuccessMessage('–í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async exportTestStatistics(testId, questions) {
        const stats = {
            test_id: testId,
            statistics: {
                total_questions: questions.length,
                average_options: questions.length > 0 ?
                    questions.reduce((sum, q) => sum + q.options.length, 0) / questions.length : 0,
                questions_by_option_count: this.groupBy(questions, q => q.options.length),
                correct_answer_distribution: this.groupBy(questions, q => q.correctOption),
                recommendations: this.generateTestRecommendations(questions)
            },
            export_info: {
                export_date: new Date().toISOString(),
                format: 'statistics'
            }
        };

        this.downloadJSON(stats, `test_${testId}_statistics.json`);
        UIManager.showSuccessMessage('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    }

    prepareTestExportData(testId, questions) {
        return {
            test_id: testId,
            questions: questions.map((q, index) => ({
                number: index + 1,
                id: q.id,
                text: q.questionText,
                options: q.options,
                correct_option: q.correctOption,
                correct_answer: q.options[q.correctOption],
                order_index: q.orderIndex,
                created_at: q.createdAt
            })),
            statistics: {
                total_questions: questions.length,
                average_options: questions.length > 0 ?
                    questions.reduce((sum, q) => sum + q.options.length, 0) / questions.length : 0
            },
            export_info: {
                export_date: new Date().toISOString(),
                format: 'complete_test_data'
            }
        };
    }

    async deleteTest(testId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç? –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            return;
        }

        try {
            const response = await APIClient.delete(`/api/tests/${testId}`);

            if (response && response.success) {
                UIManager.showSuccessMessage('–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω');
                this.loadTests();
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ' + error.message);
        }
    }

    groupBy(array, keyFn) {
        return array.reduce((groups, item) => {
            const key = keyFn(item);
            groups[key] = (groups[key] || 0) + 1;
            return groups;
        }, {});
    }

    downloadJSON(data, filename) {
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    showMessage(message, type) {
        if (type === 'success') {
            UIManager.showSuccessMessage(message);
        } else {
            UIManager.showErrorMessage(message);
        }
    }
}