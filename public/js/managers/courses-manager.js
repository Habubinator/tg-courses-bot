import { APIClient } from '../api.js';
import { UIManager } from '../ui.js';
import { paginationManager, debounce } from '../pagination.js';

export class CoursesManager {
    constructor() {
        this.currentEditingCourse = null;
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Add course button
        document.getElementById('addCourseBtn').addEventListener('click', () => {
            this.currentEditingCourse = null;
            document.getElementById('courseModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å';
            document.getElementById('courseForm').reset();
            document.getElementById('courseIsActive').checked = true;
            UIManager.openModal('courseModal');
        });

        // Course form submit
        document.getElementById('courseForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.handleCourseSubmit(e);
        });

        // Search handler
        document.getElementById('coursesSearch').addEventListener('input',
            debounce(() => {
                paginationManager.resetPage('courses');
                this.loadCourses();
            }, 500)
        );

        // Refresh button
        document.getElementById('refreshCourses').addEventListener('click', () => this.loadCourses());

        // Global functions for buttons
        window.editCourse = (courseId) => this.editCourse(courseId);
        window.deleteCourse = (courseId) => this.deleteCourse(courseId);
        window.toggleCourseStatus = (courseId) => this.toggleCourseStatus(courseId);
        window.duplicateCourse = (courseId) => this.duplicateCourse(courseId);
        window.viewCourseStatistics = (courseId) => this.viewCourseStatistics(courseId);
    }

    async handleCourseSubmit(e) {
        const formData = new FormData(e.target);
        const courseData = {
            title: formData.get('title'),
            description: formData.get('description'),
            orderIndex: parseInt(formData.get('orderIndex')) || 0,
            isActive: formData.has('isActive')
        };

        try {
            let response;
            if (this.currentEditingCourse) {
                response = await APIClient.put(`/api/courses/${this.currentEditingCourse}`, courseData);
            } else {
                response = await APIClient.post('/api/courses', courseData);
            }

            if (response && response.success) {
                UIManager.closeModal('courseModal');
                this.loadCourses();
                UIManager.showSuccessMessage(
                    this.currentEditingCourse ? '–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω'
                );
                this.currentEditingCourse = null;
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    async loadCourses() {
        UIManager.showLoading('coursesLoading');
        UIManager.hideTable('coursesTable');

        try {
            const search = document.getElementById('coursesSearch').value;

            const params = {
                page: paginationManager.getPage('courses'),
                limit: paginationManager.getItemsPerPage(),
                ...(search && { search })
            };

            const response = await APIClient.get('/api/courses', params);

            if (response && response.success) {
                this.renderCoursesTable(response.data);
                UIManager.showTable('coursesTable');

                if (response.pagination) {
                    paginationManager.createPagination(
                        'coursesPagination',
                        response.pagination.page,
                        response.pagination.totalPages,
                        () => this.loadCourses()
                    );
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫—É—Ä—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
                this.updateCourseFilters(response.data);
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤: ' + error.message);
        } finally {
            UIManager.hideLoading('coursesLoading');
        }
    }

    renderCoursesTable(courses) {
        const tbody = document.querySelector('#coursesTable tbody');
        tbody.innerHTML = '';

        if (!courses || courses.length === 0) {
            tbody.innerHTML = '<tr><td colspan="7" style="text-align: center;">–ù–µ—Ç –∫—É—Ä—Å–æ–≤</td></tr>';
            return;
        }

        courses.forEach(course => {
            const row = document.createElement('tr');

            // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const lessonsCount = course._count?.lessons || 0;
            const usersCount = course._count?.userCourses || 0;

            row.innerHTML = `
                <td>${course.id}</td>
                <td>
                    <div class="course-title-cell">
                        <strong>${course.title}</strong>
                        <div class="course-stats">
                            <span class="stat-badge">üìñ ${lessonsCount} —É—Ä–æ–∫–æ–≤</span>
                            <span class="stat-badge">üë• ${usersCount} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</span>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="course-description">
                        ${course.description ?
                    (course.description.length > 100 ?
                        course.description.substring(0, 100) + '...' :
                        course.description
                    ) :
                    '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
                }
                    </div>
                </td>
                <td>
                    <span class="status-${course.isActive ? 'active' : 'inactive'}">
                        ${course.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <span class="order-badge">${course.orderIndex}</span>
                </td>
                <td>
                    <span class="lesson-count">${lessonsCount}</span>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-sm btn-info" onclick="viewCourseStatistics('${course.id}')" title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
                            üìä
                        </button>
                        <button class="btn btn-sm" onclick="editCourse('${course.id}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="duplicateCourse('${course.id}')" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                            üìã
                        </button>
                        <button class="btn btn-sm ${course.isActive ? 'btn-warning' : 'btn-success'}" 
                                onclick="toggleCourseStatus('${course.id}')" 
                                title="${course.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}">
                            ${course.isActive ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteCourse('${course.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    async editCourse(courseId) {
        try {
            const response = await APIClient.get(`/api/courses/${courseId}`);

            if (response && response.success) {
                const course = response.data;
                this.currentEditingCourse = courseId;

                document.getElementById('courseModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å';
                document.getElementById('courseTitle').value = course.title;
                document.getElementById('courseDescription').value = course.description || '';
                document.getElementById('courseOrderIndex').value = course.orderIndex;
                document.getElementById('courseIsActive').checked = course.isActive;

                UIManager.openModal('courseModal');
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    async deleteCourse(courseId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏, —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            return;
        }

        try {
            const response = await APIClient.delete(`/api/courses/${courseId}`);

            if (response && response.success) {
                UIManager.showSuccessMessage('–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω');
                this.loadCourses();
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    async toggleCourseStatus(courseId) {
        try {
            const response = await APIClient.put(`/api/courses/${courseId}/toggle`);

            if (response && response.success) {
                UIManager.showSuccessMessage('–°—Ç–∞—Ç—É—Å –∫—É—Ä—Å–∞ –∏–∑–º–µ–Ω–µ–Ω');
                this.loadCourses();
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    async duplicateCourse(courseId) {
        if (!confirm('–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞?')) {
            return;
        }

        try {
            const response = await APIClient.get(`/api/courses/${courseId}`);

            if (response && response.success) {
                const originalCourse = response.data;

                const duplicateData = {
                    title: `${originalCourse.title} (–∫–æ–ø–∏—è)`,
                    description: originalCourse.description,
                    orderIndex: (originalCourse.orderIndex || 0) + 1,
                    isActive: false
                };

                const createResponse = await APIClient.post('/api/courses', duplicateData);

                if (createResponse && createResponse.success) {
                    UIManager.showSuccessMessage('–ö–æ–ø–∏—è –∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–Ω–∞');
                    this.loadCourses();
                }
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    async viewCourseStatistics(courseId) {
        try {
            const response = await APIClient.get(`/api/courses/${courseId}`);

            if (response && response.success) {
                const course = response.data;
                this.showCourseStatisticsModal(course);
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—Å–∞: ' + error.message);
        }
    }

    showCourseStatisticsModal(course) {
        const modalContent = this.generateStatisticsModalContent(course);

        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'block';
        modal.innerHTML = `
            <div class="modal-content course-stats-modal" style="max-width: 800px;">
                <button class="close-modal">&times;</button>
                ${modalContent}
                <div class="modal-actions">
                    <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    <button class="btn btn-primary" onclick="exportCourseStats('${course.id}')">–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        window.exportCourseStats = (courseId) => {
            this.exportCourseStatistics(courseId);
            modal.remove();
        };

        document.body.appendChild(modal);
    }

    generateStatisticsModalContent(course) {
        const lessonsCount = course.lessons?.length || 0;
        const testsCount = course.lessons?.filter(lesson => lesson.test).length || 0;

        return `
            <div class="course-stats-header">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞: ${course.title}</h3>
                <div class="stats-overview">
                    <div class="stat-card">
                        <div class="stat-number">${lessonsCount}</div>
                        <div class="stat-label">–£—Ä–æ–∫–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${testsCount}</div>
                        <div class="stat-label">–¢–µ—Å—Ç–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${course._count?.userCourses || 0}</div>
                        <div class="stat-label">–°—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
                    </div>
                </div>
            </div>

            <div class="course-details-section">
                <h4>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ</h4>
                <div class="course-info-grid">
                    <div class="info-item">
                        <label>ID –∫—É—Ä—Å–∞:</label>
                        <span>${course.id}</span>
                    </div>
                    <div class="info-item">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <span class="status-${course.isActive ? 'active' : 'inactive'}">
                            ${course.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </span>
                    </div>
                    <div class="info-item">
                        <label>–ü–æ—Ä—è–¥–æ–∫:</label>
                        <span>${course.orderIndex}</span>
                    </div>
                    <div class="info-item">
                        <label>–°–æ–∑–¥–∞–Ω:</label>
                        <span>${new Date(course.createdAt).toLocaleDateString('ru-RU')}</span>
                    </div>
                    <div class="info-item">
                        <label>–û–±–Ω–æ–≤–ª–µ–Ω:</label>
                        <span>${new Date(course.updatedAt).toLocaleDateString('ru-RU')}</span>
                    </div>
                </div>
                ${course.description ? `
                <div class="course-description-full">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <p>${course.description}</p>
                </div>
                ` : ''}
            </div>

            <div class="lessons-overview-section">
                <h4>üìñ –û–±–∑–æ—Ä —É—Ä–æ–∫–æ–≤</h4>
                ${this.generateLessonsOverviewContent(course.lessons)}
            </div>
        `;
    }

    generateLessonsOverviewContent(lessons) {
        if (!lessons || lessons.length === 0) {
            return '<p class="no-data">–í –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤</p>';
        }

        return `
            <div class="lessons-grid">
                ${lessons.map((lesson, index) => `
                    <div class="lesson-card">
                        <div class="lesson-header">
                            <span class="lesson-number">${index + 1}</span>
                            <span class="media-type-badge media-type-${lesson.mediaType.toLowerCase()}">
                                ${lesson.mediaType === 'PHOTO' ? 'üì∑' : 'üé¨'}
                            </span>
                        </div>
                        <div class="lesson-content">
                            <h5>${lesson.title}</h5>
                            <div class="lesson-features">
                                ${lesson.test ? '<span class="feature-badge has-test">üìù –¢–µ—Å—Ç</span>' : '<span class="feature-badge no-test">–ë–µ–∑ —Ç–µ—Å—Ç–∞</span>'}
                                ${lesson.buttonText ? '<span class="feature-badge has-button">üîó –ö–Ω–æ–ø–∫–∞</span>' : ''}
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    async exportCourseStatistics(courseId) {
        try {
            const response = await APIClient.get(`/api/courses/${courseId}`);

            if (response && response.success) {
                const course = response.data;
                const exportData = this.prepareCourseExportData(course);
                this.downloadJSON(exportData, `course_${course.id}_statistics.json`);
                UIManager.showSuccessMessage('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
            }

        } catch (error) {
            UIManager.showErrorMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message);
        }
    }

    prepareCourseExportData(course) {
        return {
            course_info: {
                id: course.id,
                title: course.title,
                description: course.description,
                is_active: course.isActive,
                order_index: course.orderIndex,
                created_at: course.createdAt,
                updated_at: course.updatedAt
            },
            statistics: {
                total_lessons: course.lessons?.length || 0,
                lessons_with_tests: course.lessons?.filter(l => l.test).length || 0,
                total_students: course._count?.userCourses || 0,
                photo_lessons: course.lessons?.filter(l => l.mediaType === 'PHOTO').length || 0,
                video_lessons: course.lessons?.filter(l => l.mediaType === 'VIDEO').length || 0
            },
            lessons: course.lessons?.map((lesson, index) => ({
                order: index + 1,
                id: lesson.id,
                title: lesson.title,
                media_type: lesson.mediaType,
                has_test: !!lesson.test,
                has_button: !!lesson.buttonText,
                order_index: lesson.orderIndex
            })) || [],
            export_date: new Date().toISOString()
        };
    }

    downloadJSON(data, filename) {
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    updateCourseFilters(courses) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –∫—É—Ä—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
        const selectors = [
            '#courseFilter', // –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤
            '#lessonCourseId', // –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤
            '#notificationCourseId' // –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        ];

        selectors.forEach(selector => {
            const select = document.querySelector(selector);
            if (!select) return;

            const currentValue = select.value;
            const isFilter = selector === '#courseFilter';
            const isNotification = selector === '#notificationCourseId';

            // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
            if (isNotification) {
                select.innerHTML = '<option value="">–î–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤</option>';
            } else if (isFilter) {
                select.innerHTML = '<option value="">–í—Å–µ –∫—É—Ä—Å—ã</option>';
            } else {
                select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å</option>';
            }

            courses.forEach(course => {
                const option = document.createElement('option');
                option.value = course.id;
                option.textContent = course.title;
                option.disabled = !course.isActive && !isFilter && !isNotification;
                select.appendChild(option);
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            select.value = currentValue;
        });
    }

    showMessage(message, type) {
        if (type === 'success') {
            UIManager.showSuccessMessage(message);
        } else {
            UIManager.showErrorMessage(message);
        }
    }
}