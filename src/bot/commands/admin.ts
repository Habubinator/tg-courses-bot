import TelegramBot from "node-telegram-bot-api";
import { repository } from "../../db/repository";

export class AdminCommands {
    private bot: TelegramBot;

    constructor(bot: TelegramBot) {
        this.bot = bot;
    }

    registerHandlers() {
        // Admin commands
        this.bot.onText(/\/admin_add (.+)/, this.handleAddAdmin.bind(this));
        this.bot.onText(
            /\/admin_remove (.+)/,
            this.handleRemoveAdmin.bind(this)
        );
        this.bot.onText(/\/stats/, this.handleStats.bind(this));
    }

    private async handleAddAdmin(
        msg: TelegramBot.Message,
        match: RegExpExecArray | null
    ) {
        const chatId = msg.chat.id.toString();

        if (!(await repository.isAdmin(chatId))) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
            return;
        }

        if (!match || !match[1]) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID. –ü—Ä–∏–º–µ—Ä: /admin_add 123456789"
            );
            return;
        }

        const telegramId = match[1].trim();

        try {
            await repository.addAdmin(telegramId);
            await this.bot.sendMessage(
                chatId,
                `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${telegramId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`
            );
        } catch (error) {
            console.error("Error adding admin:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
        }
    }

    private async handleRemoveAdmin(
        msg: TelegramBot.Message,
        match: RegExpExecArray | null
    ) {
        const chatId = msg.chat.id.toString();

        if (!(await repository.isAdmin(chatId))) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
            return;
        }

        if (!match || !match[1]) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID. –ü—Ä–∏–º–µ—Ä: /admin_remove 123456789"
            );
            return;
        }

        const telegramId = match[1].trim();

        try {
            await repository.removeAdmin(telegramId);
            await this.bot.sendMessage(
                chatId,
                `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${telegramId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`
            );
        } catch (error) {
            console.error("Error removing admin:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
        }
    }

    private async handleStats(msg: TelegramBot.Message) {
        const chatId = msg.chat.id.toString();

        if (!(await repository.isAdmin(chatId))) {
            await this.bot.sendMessage(
                chatId,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            );
            return;
        }

        try {
            // Get basic statistics
            const course = await repository.getFirstCourse();
            if (!course) {
                await this.bot.sendMessage(chatId, "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            const stats = await repository.getUserStats("");

            await this.bot.sendMessage(
                chatId,
                `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞ "${course.title}"\n\n` +
                    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${
                        stats?.userCourses?.length || 0
                    }\n` +
                    `‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: ${
                        stats?.userCourses?.filter((uc: any) => uc.completedAt)
                            ?.length || 0
                    }\n` +
                    `üìö –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è: ${
                        stats?.userCourses?.filter((uc: any) => !uc.completedAt)
                            ?.length || 0
                    }`
            );
        } catch (error) {
            console.error("Error getting stats:", error);
            await this.bot.sendMessage(
                chatId,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            );
        }
    }
}
